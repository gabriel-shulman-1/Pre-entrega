html:5				    crea la estructura
https://whimsical.com/	diseños de paginas
pensar la pagina como un diario (noticia periodistica)
1-skech: boceto a mano de las paginas
2-wireframe: grupos de contenido, estructura de la info y descripcion y visualizacion
3-mockup: representacionde un diseño de mediana/alta calidad (https://moqups.com/es/)
    aca se comienza a codificar
4-prototipo interactivo: presentacion navegable del producto final
5-final: la pagina ya corre en navegador/tablet/celular

alt + z : pone en lcodigo en una columna

enlases absolutos: apunta a pagina web externa
enlases relativos: apunta a pagina del mismo proyecto
enlases internos: apunta a una seccion especifica de la pagina misma

<div></div> se usaba para seccionar la pagina, pero ya no se usa

            link externo                                          opcion abrir pestaña    texto
<a href="https://www.google.com/maps/@-34.6938925,-58.4744191,15z" translate="_blank"> Ir a mi casa</a>

index siempre fuera de todo

imagen    directorio y nombre
<img src="img/maeamee.jpg">

backgrond-color             color de..
border/pading               margenes internos y externos
width/heig                   alto y ancho
margin                      espacio entre box y borde
display: in-line block      box se forman en fila H
overflow: scroll            barra para subir y bajar

pre entrega
hacer proyecto con:
    5 paginas para navegador y celular. hacerlo en https://whimsical.com/ (index + 4 paginas)
    cada pagina usar header, body y footer
    usar elementos de html(etiquetas)
    en css aplicar lo visto y boxmodel(margin, padding y reset)

para clases
    clase="tipo nombre" -> .nombre modifica solo el del nombre
                        -> .tipo modifica toda la clase

div*4 = 4 divs
padding = espacio adentro
margin = espacio afuera

diseños de grids

    https://1linelayouts.glitch.me/

    https://cssgrid-generator.netlify.app/

    https://grid.layoutit.com/

    https://www.adictosaltrabajo.com/2018/01/30/maquetacion-con-css-grid/

    https://cssgridgarden.com/#es

Dejo lo que se pide en la 2da entrega, aclaro que falta todavía y muchas cosas aún no las vimos pero así ya las tienen:

La entrega deberá ser por link de repositorio de Github, no usamos más drive o archivo comprimido.
Dentro de sus repositorios es importante que tengan link a Github Pages. Si no les cargan las imágenes o algún link hacia un html o página pero notan que desde live server si, revisen las rutas, seguramente estén usando rutas absolutas en lugar de relativas.
A nivel código si será necesario para esta entrega el uso de flex, grids o ambos, esto es como ustedes lo prefieran.
Tema Bootstrap, pueden utilizarlo de dos formas: a) Para todo el maquetado pero lo personalizan: cambian el color, la letra, una sombra o algo que me haga dar cuenta que saben dar estilo propio y no copiar y pegar. b) Hacer uso de algunos componentes como por ejemplo navbar, carrusel, cards, entre otros.
Si se les rompe algo con Bootstrap tranquilidad porque es normal, revisen si no tienen clases con los mismos nombres o si en su css tienen alguna propiedad aplicada sobre una etiqueta directamente. Para el proyecto final se les pide 2 componentes.
Diseño responsive: se piden dos html. Esto quiere decir que si yo desde el inspector veo su página la misma debe adaptarse desde 320px en adelante sin scroll horizontal. La mejor manera de ver si mi página es responsive es enviarse en el link de Github Pages y abrirlo desde un celular, si se va mal la página no es responsive y algo lo genera usualmente algún width, margin o padding que desborda del ancho de la pantalla.
Animaciones, efectos o transiciones: utilicen las que deseen pero que la página no sea un zamba que cueste navegarla.

usar Bootstrap para alguna pagina o elemento(items, menu hamburguesa, ect)

gitbash
git --version                                           muestra la version
clear                                                   limpia pantalla
git config --global user.name "nombre del usuario"      configurar el nombre del usuario
git config --global user.email (mail mio)               configurar mail del usuario
git config user.name                                    muestra el nombre de usuario
git config user.email                                   muestra el mail del usuario
cd (arrastrar la carpeta a la terminal)                 seleccionar carpeta a trabajar con git
git init                                                inicia el repositorio en la carpeta
git status                                              muestra el estado (que hay y que hay para commit)
---pasar a la carpeta .git
git add (nombre de archivo)                             agrega un solo archivo
git add .                                               agrega todo lo que esta en la carpeta
---se pasa a la carpeta .git
git commit -m "descripcion del cambio"                  commit con mensaje
git restore (nombre del archivo)                        restaura el archivo

git branch                                              nos muestra la rama donde estoy
git branch (nombre)                                     crea nueva rama
git branch -d (nombre)                                  borra el branch
git checkout (nombre de la otra rama)                   me voy a la otra rama
--- para hacer versiones de un branch, hay que posicionarse sobre el branch a versionar
git merge (nombre del branch a mergear)                 absorver la rama indicada a la rama principal

git ignore                                              no subi archivos especificados
git remote add origin (servidor)                        establecer repositorio en la nube
git push -u origin (nombre del branch)                  subir al repositorio
git clone (link "clone https")                          clona el repositorio a la pc. crear la carpeta primero y posicionarse con git en la carpeta.

pre entrega 2
https://aguilar1998.github.io/segundaPre-entrega/index.html

otros comandos git
●	git add <nombre_archivo>: comienza a trackear el archivo “nombre_archivo” (con “.” añades todos los archivos del directorio, y con “*” lo añades todo).
●	git add -i: permite agregar archivos de forma interactiva.
●	git branch: lista todas las ramas locales.
●	git branch -a: lista todas las ramas locales y remotas.
●	git branch -d <nombre_rama>: elimina la rama local con el nombre “nombre_rama”.
●	git checkout <nombre_rama>: salta sobre la rama “nombre_rama”.
●	git checkout — <filename>: reemplaza los cambios en tu directorio de trabajo con el último contenido de HEAD. Los cambios que ya han sido agregados al Index, así como también los nuevos archivos, se mantendrán sin cambio.
●	git checkout -b <nombre_rama_nueva>: crea una rama con el nombre “nombre_rama_nueva” a partir de aquella en la que te encuentres parado, y luego salta sobre la rama nueva.
●	git checkout -t origin/<nombre_rama>: si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre.
●	git clone </path/to/repository>: crea una copia local del repositorio. Si se utiliza un servidor remoto, habrá que usar “git clone <username@host:/path/to/repository>”.
●	git commit -am “<mensaje>”: confirma los cambios realizados. El “mensaje” generalmente se usa para asociar al commit una breve descripción de los cambios realizados. Ahora los archivos están incluídos en el HEAD, pero aún no en tu repositorio remoto.
●	git diff <source_branch> <target_branch>: permite revisar los cambios antes de fusionarlos.
●	git fetch: descarga los cambios realizados en el repositorio remoto.
●	git init: inicia un repositorio vacío en una carpeta específica.
●	git log: muestra un registro de los commits realizados.
●	git merge <nombre_rama>: fusiona la rama “nombre_rama” a tu rama activa.
●	git pull: unifica los comandos fetch y merge en un único comando (actualiza tu repositorio local al commit más nuevo).
●	git push origin <nombre_rama>: sube los cambios desde el branch local origin al branch “nombre_rama”.
●	git remote add origin <server>: conecta tu repositorio local a un repositorio remoto si no has clonado un repositorio ya existente. Ahora podrás subir tus cambios al repositorio remoto seleccionado.
●	git remote prune origin: actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota.
●	git reset –hard HEAD: elimina los cambios realizados que aún no se hayan hecho commit.
●	git reset –hard origin/master: deshace todos los cambios locales y commits (es necesario hacer antes “git fetch origin”, para traer la última versión del servidor y apuntar a tu copia local principal).
●	git revert <hash_commit>: revierte el commit realizado, identificado por el “hash_commit”.
●	git status: muestra el estado actual de la rama, como los cambios que hay sin commitear.
●	git tag <version> <commit_id>: crea la etiqueta “version” asociada al commit “commit_id”. Se recomienda crear etiquetas para cada nueva versión publicada de un software.
●	gitk: ejecuta la interfaz gráfica por defecto.
